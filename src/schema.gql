# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Permission for repository share mode"""
enum AccessPermission {
  EveryoneWithTheLink
  OnlyPeopleWhoHasAccess
}

"""Visibility used for repository and workspace"""
enum AccessVisibility {
  Private
  Public
}

input AddContributorArgs {
  id: String!
  member_email: String!
}

input AddNewMemberArgs {
  id: String!
  member_email: String!
  role: UserRole!
}

type AppResponse {
  message: String!
  type: ResponseType!
}

type BrowsingEvent {
  browser_client_id: String!
  event_name: String!
  properties: String
  trigger_at: Float!
  user_id: String
}

input ChangeWorkspaceVisibilityArgs {
  id: String!
  updated_date: Float! = 1689093953
  visibility: AccessVisibility!
}

input CreateNewRepositoryArgs {
  description: String!
  directories: [DirectoryAsInput!]!
  icon: String!
  name: String!
  repositorySlug: String
  tabs: [RepositoryTabAsInput!]!
  visibility: AccessVisibility! = Private
  workspaceId: String!
}

input CreateNewTimeTrackerArgs {
  date: Float!
  mode: TimeTrackerProductivityMode!
  recurring: Boolean!
  sessionEndTime: Float!
  sessionStartTime: Float!
}

input CreateNewUserArgs {
  email: String!
  full_name: String
  profile_image: String!
  provider: String! = "UNKNOWN"
  uid: String!
  username: String!
}

input CreateNewWorkspaceArgs {
  description: String
  name: String!
  visibility: Float! = 0
}

input DeleteRepositoryArgs {
  id: String!
}

input DeleteWorkspaceArgs {
  id: String!
}

type Directory {
  color: String!
  id: String!
  name: String!
  parentDirectory: String
}

input DirectoryAsInput {
  color: String!
  id: String!
  name: String!
  parentDirectory: String
}

input FullRepositoryTabAsInput {
  customName: String
  description: String! = ""
  favIconUrl: String!
  id: String!

  """List of labels"""
  labels: [String!]! = []
  lastAccessed: Float
  parentDirectory: String

  """List of repository tabs IDs"""
  pinned: [String!]! = []
  repositoryId: String
  title: String!
  url: String!
}

input GatherUrlsMetadataArgs {
  websiteUrls: [String!]!
}

input GetAllPublicRepositoriesArgs {
  limit: Float!
  offset: Float!
}

input GetRepositoryBannerArgs {
  repositoryId: String!
}

input GetRepositoryByIdArgs {
  id: String!
}

input GetRepositoryBySlugArgs {
  slug: String!
  workspaceId: String!
}

input GetUserByEmailArgs {
  email: String!
}

input GetUserByIdArgs {
  id: String!
}

input GetUserByUsernameArgs {
  username: String!
}

input GetUserRepositoriesArgs {
  userId: String!
}

input GetUserWorkspacesArgs {
  userId: String!
}

input GetWorkspaceByIdArgs {
  id: String!
}

input GetWorkspaceByNameArgs {
  workspace_name: String!
}

input GetWorkspaceBySlugArgs {
  workspace_slug: String!
}

input GetWorkspaceRepositoriesArgs {
  workspaceId: String!
}

type Mutation {
  addRepositoryContributor(addRepositoryContributorArgs: AddContributorArgs!): AppResponse!
  addWorkspaceMember(addWorkspaceMemberArgs: AddNewMemberArgs!): AppResponse!
  changeWorkspaceVisibility(changeWorkspaceVisibilityArgs: ChangeWorkspaceVisibilityArgs!): AppResponse!
  createNewRepository(createRepositoryArgs: CreateNewRepositoryArgs!): AppResponse!
  createNewTimeTrackerSession(createNewTimeTrackerArgs: CreateNewTimeTrackerArgs!): AppResponse!
  createNewUser(createNewUserArgs: CreateNewUserArgs!): AppResponse!
  createNewWorkspace(createNewWorksapceArgs: CreateNewWorkspaceArgs!): AppResponse!
  deleteRepository(deleteRepositoryArgs: DeleteRepositoryArgs!): AppResponse!
  deleteUser: AppResponse!
  deleteWorkspace(deleteWorkspaceArgs: DeleteWorkspaceArgs!): AppResponse!
  pinRepository(pinRepositoryArgs: PinRepositoryArgs!): AppResponse!
  pinRepositoryTab(pinRepositoryTabArgs: PinRepositoryTabArgs!): AppResponse!
  ping: Ping!
  removeRepositoryContributor(removeRepositoryContributorArgs: RemoveContributorArgs!): AppResponse!
  removeTabsFromRepository(removeTabsFromRepositoryArgs: RemoveTabsFromRepositoryArgs!): AppResponse!
  removeWorkspaceMember(removeWorkspaceMemberArgs: RemoveMemberArgs!): AppResponse!
  selectQuickAccessWorkspace(selectQuickAccessWorkspaceArgs: SelectQuickAccessWorkspaceArgs!): AppResponse!
  setRepositoryTabs(setRepositoryTabsArgs: SetRepositoryTabsArgs!): AppResponse
  smartTabGrouping(smartTabGroupingArgs: SmartTabGroupingArgs!): [TabWithCategory!]!
  toggleLikeRepository(toggleLikeRepositoryArgs: ToggleLikeRepositoryArgs!): AppResponse!
  triggerOnBrowsingEventUpdated(triggerBrowsingEventArgs: TriggerBrowsingEventArgs!): BrowsingEvent!
  unpinRepository(unpinRepositoryArgs: PinRepositoryArgs!): AppResponse!
  unpinRepositoryTab(unpinRepositoryTabArgs: UnpinRepositoryTabArgs!): AppResponse!
  updateReadme(updateReadmeArgs: UpdateReadmeArgs!): AppResponse!
  updateRepositoryAccess(updateRepositoryAccessArgs: UpdateRepositoryAccessArgs!): AppResponse!
  updateRepositoryBanner(updateRepositoryBannerArgs: UpdateRepositoryBannerArgs!): AppResponse!
  updateRepositoryInfo(updateRepositoryInfoArgs: UpdateRepositoryArgs!): Repository!
  updateUser(updateUserArgs: UpdateUserArgs!): AppResponse!
  updateWorkspace(updateWorkspaceArgs: UpdateWorkspaceArgs!): AppResponse!
}

input OnBrowsingEventUpdatedArgs {
  browser_client_id: String!
  subscribed_events: [String!]!
}

input PinRepositoryArgs {
  id: String!
}

input PinRepositoryTabArgs {
  repositoryId: String!
  tabId: String!
}

type Ping {
  id: String!
}

type Pong {
  pingId: String!
}

type Query {
  gatherUrlsMetadata(gatherUrlsMetadataArgs: GatherUrlsMetadataArgs!): [RepositoryTab!]!
  getAllPublicRepositories(getAllPublicRepositoriesArgs: GetAllPublicRepositoriesArgs!): [Repository!]!
  getAllUsers: [User!]!
  getAllWorkspaces: [Workspace!]!
  getCurrentUser: User
  getMyWorkspaces: [Workspace!]!
  getReadmeContent(readReadmeArgs: ReadReadmeArgs!): String!
  getRepositoryBanner(getRepositoryBannerArgs: GetRepositoryBannerArgs!): String!
  getRepositoryById(getRepositoryByIdArgs: GetRepositoryByIdArgs!): Repository!
  getRepositoryBySlug(getRepositoryBySlugArgs: GetRepositoryBySlugArgs!): Repository!
  getUserByEmail(getUserByEmailArgs: GetUserByEmailArgs!): User
  getUserById(getUserByIdArgs: GetUserByIdArgs!): User
  getUserByUsername(getUserByUsernameArgs: GetUserByUsernameArgs!): User
  getUserRepositories(getUserRepositoriesArgs: GetUserRepositoriesArgs!): [Repository!]!
  getUserTimeTrackerSessions: [TimeTrackerSession!]!
  getUserWorkspaces(getUserWorkspacesArgs: GetUserWorkspacesArgs!): [Workspace!]!
  getWorkspaceById(getWorkspaceByIdArgs: GetWorkspaceByIdArgs!): Workspace
  getWorkspaceByName(getWorkspaceByNameArgs: GetWorkspaceByNameArgs!): Workspace
  getWorkspaceBySlug(getWorkspaceBySlugArgs: GetWorkspaceBySlugArgs!): Workspace
  getWorkspaceRepositories(getWorkspaceRepositoriesArgs: GetWorkspaceRepositoriesArgs!): [Repository!]!
  queryOpenGraphMetadata(queryOpenGraphMetadata: QueryOpenGraphMetadataArgs!): AppResponse!
  searchOnWeb(searchTabOnWebArgs: SearchTabOnWebArgs!): String!
}

input QueryOpenGraphMetadataArgs {
  websiteUrl: String!
}

input ReadReadmeArgs {
  repositoryId: String!
}

input RemoveContributorArgs {
  id: String!
  member_email: String!
}

input RemoveMemberArgs {
  id: String!
  member_email: String!
}

input RemoveTabsFromRepositoryArgs {
  id: String!
  tabs: [String!]!
}

type Repository {
  accessPermission: AccessPermission!
  bannerUrl: String

  """List of user IDs"""
  contributors: [String!]!
  created_date: Float!
  description: String

  """List of directory IDs"""
  directories: [Directory!]!

  """Number of favorites"""
  favorite_count: Float!

  """List of user IDs"""
  favorites: [String!]!
  icon: String!
  id: String!
  name: String!
  owner: String!

  """List of user IDs who can access the repository shared mode"""
  permittedUsers: [String!]!

  """List of repository tabs IDs"""
  pinned: [String!]!
  readme: String
  slug: String!

  """List of repository tab IDs"""
  tabs: [RepositoryTab!]!
  updated_date: Float!
  visibility: AccessVisibility!
  workspaceId: String!
}

type RepositoryTab {
  customName: String
  description: String!
  favIconUrl: String!
  id: String!

  """List of labels"""
  labels: [String!]!
  lastAccessed: Float
  parentDirectory: String

  """List of repository tabs IDs"""
  pinned: [String!]!
  repositoryId: String
  title: String!
  url: String!
}

input RepositoryTabAsInput {
  customName: String
  favIconUrl: String
  parentDirectory: String
  title: String
  url: String!
}

input RepositoryTabInput {
  customName: String
  description: String! = ""
  favIconUrl: String!
  id: String!

  """List of labels"""
  labels: [String!]! = []
  lastAccessed: Float
  parentDirectory: String

  """List of repository tabs IDs"""
  pinned: [String!]! = []
  repositoryId: String
  title: String!
  url: String!
}

enum ResponseType {
  Error
  Success
}

input SearchTabOnWebArgs {
  websiteUrl: String!
}

input SelectQuickAccessWorkspaceArgs {
  id: String
  updated_date: Float! = 1689093953
}

input SetRepositoryTabsArgs {
  directories: [DirectoryAsInput!]!
  id: String!
  tabs: [FullRepositoryTabAsInput!]!
}

input SmartTabGroupingArgs {
  groups: [String!]!
  tabs: [RepositoryTabAsInput!]!
}

type Subscription {
  onBrowsingEventUpdated(onBrowsingEventArgs: OnBrowsingEventUpdatedArgs!): BrowsingEvent!
  pong: Pong!
}

type TabWithCategory {
  category: String!
  url: String!
}

"""Engine state for Time Tracker"""
enum TimeTrackerEngineState {
  Idle
  Offline
  Running
  Void
}

"""Productivity mode for Time Tracker"""
enum TimeTrackerProductivityMode {
  CasualMode
  FocusMode
}

type TimeTrackerSession {
  createdAt: Float!
  date: Float!
  id: String!
  mode: TimeTrackerProductivityMode!
  recurring: Boolean!
  sessionEndTime: Float!
  sessionStartTime: Float!
  state: TimeTrackerEngineState!
}

input TimeTrackerSessionInputType {
  createdAt: Float!
  date: Float!
  id: String!
  mode: TimeTrackerProductivityMode!
  recurring: Boolean!
  sessionEndTime: Float!
  sessionStartTime: Float!
  state: TimeTrackerEngineState!
}

input ToggleLikeRepositoryArgs {
  id: String!
}

input TriggerBrowsingEventArgs {
  browser_client_id: String
  event_name: String
  properties: String
  trigger_at: Float
  user_id: String
}

input UnpinRepositoryTabArgs {
  tabId: String!
}

input UpdateReadmeArgs {
  readmeData: String!
  repositoryId: String!
}

input UpdateRepositoryAccessArgs {
  accessPermission: AccessPermission! = OnlyPeopleWhoHasAccess
  id: String!
  permittedUsers: [String!]! = []
}

input UpdateRepositoryArgs {
  accessPermission: AccessPermission = OnlyPeopleWhoHasAccess
  bannerUrl: String

  """List of user IDs"""
  contributors: [String!] = []
  created_date: Float
  description: String

  """List of directory IDs"""
  directories: [DirectoryAsInput!] = []

  """Number of favorites"""
  favorite_count: Float = 0

  """List of user IDs"""
  favorites: [String!] = []
  icon: String
  id: String
  name: String
  owner: String

  """List of user IDs who can access the repository shared mode"""
  permittedUsers: [String!] = []

  """List of repository tabs IDs"""
  pinned: [String!] = []
  readme: String
  slug: String

  """List of repository tab IDs"""
  tabs: [RepositoryTabInput!] = []
  updated_date: Float
  visibility: AccessVisibility = Private
  workspaceId: String
}

input UpdateRepositoryBannerArgs {
  bannerData: Upload!
  mimeType: String!
  repositoryId: String!
}

input UpdateUserArgs {
  created_date: Float
  email: String
  favorites: [String!] = []

  """List of user IDs"""
  followers: [String!] = []

  """List of user IDs"""
  following: [String!] = []
  full_name: String

  """List of repositories IDs"""
  pinned_repositories: [String!] = []

  """List of repository tabs IDs"""
  pinned_tabs: [RepositoryTabInput!] = []
  profile_image: String
  provider: String = "UNKNOWN"

  """ID of selected workspace"""
  selected_workspace: String
  setting: UserSettingInputType
  timeTrackerSessions: [TimeTrackerSessionInputType!]
  updated_date: Float
  username: String

  """List of workspace IDs"""
  workspaces: [String!] = []
}

input UpdateWorkspaceArgs {
  description: String = ""
  id: String!
  name: String!
  updated_date: Float! = 1689093953
  visibility: AccessVisibility!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  created_date: Float!
  email: String!
  favorites: [String!]!

  """List of user IDs"""
  followers: [String!]!

  """List of user IDs"""
  following: [String!]!
  full_name: String
  id: String!

  """List of repositories IDs"""
  pinned_repositories: [String!]!

  """List of repository tabs IDs"""
  pinned_tabs: [RepositoryTab!]!
  profile_image: String
  provider: String!

  """ID of selected workspace"""
  selected_workspace: String
  setting: UserSetting!
  timeTrackerSessions: [TimeTrackerSession!]!
  updated_date: Float!
  username: String!

  """List of workspace IDs"""
  workspaces: [String!]!
}

"""Type of user roles in the system"""
enum UserRole {
  PublicUser
  RepositoryContributor
  WorkspaceMember
  WorkspaceModerator
  WorkspaceOwner
}

type UserSetting {
  timeTracker: UserTimeTrackerSetting!
}

input UserSettingInputType {
  timeTracker: UserTimeTrackerSettingInputType!
}

type UserTimeTrackerSetting {
  limitLeastUsedTime: Float!
}

input UserTimeTrackerSettingInputType {
  limitLeastUsedTime: Float!
}

type Workspace {
  created_date: Float!
  description: String
  id: String!
  members: [String!]!
  name: String!
  owner: String!
  repositories: [String!]!
  roles: [UserRole!]!
  slug: String!
  updated_date: Float!
  visibility: AccessVisibility!
}